[{"content":"새로운 글 작성하기 신규 포스트는 터미널에 다음과 같이 입력하면 된다.\n파일명 정하기가 어려울 것 같아 날짜로 입력하기로 했다.\n1 2 3 # hugo new post/\u0026lt;폴더명\u0026gt;/파일 이름.md (폴더명 생략가능) $ hugo new post/tech/220727-1.md Content \u0026#34;/Users/smfc/Dev/blog/content/post/tech/220727-1.md\u0026#34; created blog/content/post 하단에 md 파일이 생성되고 그것을 수정해서 저장하면 된다.\n터미널에서 로컬서버를 실행하면 바로 확인이 가능하다\n1 2 3 # 로컬 서버 실행 $ hugo server -D # http://localhost:1313 접속하여 확인 작성을 다 마치고 로컬서버에서 확인 후 배포를 하면 된다.\n1 2 3 4 5 # 로컬서버 종료 ctrl + c $ git add . $ git push $ ./deploy.sh 포스트에 댓글 추가하기 참고한 gurumee92님이 하신대로 깃허브에서 \u0026lsquo;blog-comments\u0026rsquo;라는 이름으로 레포지토리를 하나 더 만들고 여기 utterances 사이트로 가서 \u0026lsquo;Blog Post ↔️ Issue Mapping`에서 한가지를 선택 후 바로 위쪽에 repo 칸에 자신의 레포지토리 이름(JaeKimDev/blog-comments)을 넣어주고 아래쪽에 보여지는 스크립트를 복사하면 된다.\n1 2 3 4 5 6 7 \u0026lt;script src=\u0026#34;https://utteranc.es/client.js\u0026#34; repo=\u0026#34;JaeKimDev/blog-comments\u0026#34; issue-term=\u0026#34;title\u0026#34; theme=\u0026#34;github-light\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34; async\u0026gt; \u0026lt;/script\u0026gt; 복사한 스크립트를 blog/themes/hugo-tranquilpeak-theme/layouts/partials/post/comment.html 파일을 열어 하단에 붙여넣어 주고 확인해보면 댓글 추가 폼이 생성되었다.\n포스트에 이미지 추가하기 어떻게 보면 간단할 수 있는데, md 파일을 수정하면서 어떻게 이미지를 넣어야 할 지 몰라서 고생했다.\nstatic 폴더 안에 image 폴더를 만들고(blog/static/image) 로컬에서 불러오는 방법\n온라인에 올리고 링크를 이용하여 불러오는 방법\n1번 방법은 blog/static/image 안에 \u0026lsquo;220727-1.png파일을 추가하고 글 작성 시 ` 라고 적어주면 이미지가 추가된다.\n2번 방법은 온라인에 올리고 링크를 이용하여 불러오는 방법이다.\n나는 깃허브 TIL폴더 하단에 etc/images/blog폴더를 만들어서 이미지를 업로드 하고\n![img](이미지 경로) 라고 적어주었다.\n여러번 쓸 수 있을 것 같은 짤방이나 이미지는 한번만 올려두고 링크로 끌고 오는 편이 좋을 것 같다.\n만들어진 서비스를 이용하는 것이 더 편리하고 좋겠지만, git과도 좀 더 친해질 수 있고 마크다운 언어도 익숙해질 수 있을 것 같아 일단은 써보려고 한다.\nReference Github 페이지 블로그 만들기 (with Hugo) 블로그 구축기 (1) Hugo + Github으로 개인 블로그 만들기 ","date":"2022-07-27T09:23:57+08:00","image":"https://raw.githubusercontent.com/JaeKimdev/TIL/main/etc/images/blog/blog-1.avif","permalink":"https://JaeKimdev.github.io/p/hugo%EB%A1%9C-github.io-%EA%B8%B0%EC%88%A0-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%A7%8C%EB%93%A4%EA%B8%B02/","title":"Hugo로 github.io 기술 블로그 만들기(2)"},{"content":"개발 공부를 시작하면서부터 기술블로그를 쓰면 좋다는 이야기를 들었지만, 어디서부터 어떻게 해야 할지 몰라서 github.io 페이지를 만들고 Jekyll을 이용해서 블로그를 만들어 놓기만 한 채 방치하고 있었다.\niOS 공부를 시작하면서 공부한 것 정리용으로, 또 나중에 찾아볼 수 있도록 기록하면 좋겠다 싶어서 찾아보니 Jekyll은 컨텐츠가 쌓일수록 빌드 속도가 엄청 늦어진다는 글을 읽어서 새롭게 hugo를 사용해 보기로 했다.\n마침 야곰 아카데미 코드 스타터 5주 과정이 끝나서 리뷰를 써야겠다고 마음먹고 시작!\nHugo 설치 HomeBrew가 설치되어 있어야 한다. 여기 화면 중앙의 Install Homebrew하단의 코드를 복사해서 터미널에서 실행 1 2 3 4 5 6 7 8 # hugo 설치 $ brew install hugo # hugo 버전 확인 $ hugo version # 설치가 되어 있다면 버전이 출력된다. hugo v0.101.0+extended darwin/amd64 BuildDate=unknown Github 레포지토리 생성 blog 라는 이름의 레포지토리와 \u0026lt;username\u0026gt;.github.io 자기아이디 이름의 github.io 레포지토리를 생성해 준다\nHugo 프로젝트 만들기 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # hugo 프로젝트 생성 $ hugo new site blog # 생성 완료되면 출력 문구 Congratulations! Your new Hugo site is created in /Users/user/Workspaces/blog. Just a few more steps and you\u0026#39;re ready to go: 1. Download a theme into the same-named folder. Choose a theme from https://themes.gohugo.io/ or create your own with the \u0026#34;hugo new theme \u0026lt;THEMENAME\u0026gt;\u0026#34; command. 2. Perhaps you want to add some content. You can add single files with \u0026#34;hugo new \u0026lt;SECTIONNAME\u0026gt;/\u0026lt;FILENAME\u0026gt;.\u0026lt;FORMAT\u0026gt;\u0026#34;. 3. Start the built-in live server via \u0026#34;hugo server\u0026#34;. Visit https://gohugo.io/ for quickstart guide and full documentation. 테마는 여기 에서 확인하고 고를 수 있는데, 나는 gurumee92님이 설치한 hugo-tranquilpeak-theme을 따라서 설치하였다. 뭣도 모르니까\u0026hellip;\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # blog 폴더로 이동 $ cd blog # 프로젝트 루트 경로 확인 $ pwd /Users/smfc/Dev/blog # git 초기화 $ git init # 브렌치를 main으로 변경 $ git branch -M main # git submodule add https://github.com/\u0026lt;theme 경로\u0026gt;.git themes/\u0026lt;theme 이름\u0026gt; $ git submodule add https://github.com/kakawait/hugo-tranquilpeak-theme.git themes/hugo-tranquilpeak-theme # 테마 폴더 안의 `config.toml` 파일을 blog 폴더 하단으로 복사 $ cp themes/hugo-tranquilpeak-theme/exampleSite/config.toml config.toml 그후 blog 폴더 하단의 config.toml 파일을 열어서 수정해준다.\n1 2 3 4 5 # 이 부분 baseURL을 자신의 github.io 주소로 수정 baseURL = \u0026#34;https://jaekimdev.github.io/\u0026#34; # 블로그 상단에 노출되는 이름 수정 title = \u0026#34;Jae\u0026#39;s Devlog\u0026#34; 저장 후 터미널에서 hugo 서버 실행\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 $ hugo server Start building sites … hugo v0.101.0+extended darwin/amd64 BuildDate=unknown | EN-US -------------------+-------- Pages | 9 Paginator pages | 0 Non-page files | 0 Static files | 4 Processed images | 0 Aliases | 1 Sitemaps | 1 Cleaned | 0 Built in 9 ms Watching for changes in /Users/smfc/Dev/blog/{archetypes,content,data,layouts,static,themes} Watching for config changes in /Users/smfc/Dev/blog/config.toml Environment: \u0026#34;development\u0026#34; Serving pages from memory Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender Web Server is available at http://localhost:1313/ (bind address 127.0.0.1) Press Ctrl+C to stop 브라우저를 열어서 http://localhost:1313/로 접속하면 블로그 화면을 볼 수 있다.\ngithub 레포지토리 연결 blog에 blog 레포지토리를, blog/public에 \u0026lt;username\u0026gt;.github.io 레포지토리를 연결한다.\n1 2 3 4 5 6 7 # blog -\u0026gt; blog 레포지토리 연결 # git remote add origin http://github.com/\u0026lt;username\u0026gt;/blog.git $ git remote add origin https://github.com/jaekimdev/blog.git # blog/public -\u0026gt; \u0026lt;username\u0026gt;.github.io 연결 # git submodule add -b main http://github.com/\u0026lt;username\u0026gt;/\u0026lt;username\u0026gt;.github.io.git public $ git submodule add -b main http://github.com/jaekimdev/jaekimdev.github.io.git public ‼️ public이 이미 존재한다는 에러 메세지가 보여지고 진행되지 않음. ➡️ blog 폴더 하단의 public 폴더를 지운 후에 명령어 실행\n배포를 쉽게 하기 위해 blog 폴더 하단에 \u0026lsquo;deploy.sh\u0026rsquo; 파일을 만들어 준다 - 나는 config.toml 파일을 복사한 후 이름을 변경해 주고 아래 내용을 붙여넣기 한 후 저장하였다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 #!/bin/bash echo -e \u0026#34;\\033[0;32mDeploying updates to GitHub...\\033[0m\u0026#34; # Build the project. # hugo -t \u0026lt;여러분의 테마\u0026gt; hugo -t hugo-tranquilpeak-theme # Go To Public folder, sub module commit cd public # Add changes to git. git add . # Commit changes. msg=\u0026#34;rebuilding site `date`\u0026#34; if [ $# -eq 1 ] then msg=\u0026#34;$1\u0026#34; fi git commit -m \u0026#34;$msg\u0026#34; # Push source and build repos. git push origin main # Come Back up to the Project Root cd .. # blog 저장소 Commit \u0026amp; Push git add . msg=\u0026#34;rebuilding site `date`\u0026#34; if [ $# -eq 1 ] then msg=\u0026#34;$1\u0026#34; fi git commit -m \u0026#34;$msg\u0026#34; git push origin main 터미널에서 sh파일에 권한을 주고 실행한다.\n1 2 3 4 5 # deploy.sh 실행 파일 권한 부여 $ chmod 777 deploy.sh # 배포 실행 $ ./deploy.sh ‼️ 나는 이 부분에서 오류 발생! ➡️ 오류메세지에서 안내해 주는대로 git fetch 먼저 해주고 ./deploy.sh 재실행 ‼️ 또다시 오류 발생! ➡️ 오류메세지에서 안내해 주는대로 git pull 실행하고 git branch --set-upstream-to=origin/main실행한 후 ./deploy.sh 재실행 ‼️ 또다시 오류 발생! ➡️ 오류메세지에서 안내해 주는대로 git pull 실행하고 ./deploy.sh 재실행 내가 찾아본 블로그들에서는 이 부분을 알려주는 곳이 없어서 엄청 오랫동안 만들고 지우고를 반복;;\n이젠 다 해결되어 https://\u0026lt;username\u0026gt;.github.io로 접속해서 블로그를 볼 수 있다!!! 🎉\nReference Github 페이지 블로그 만들기 (with Hugo) 블로그 구축기 (1) Hugo + Github으로 개인 블로그 만들기 Hugo로 Github.io 블로그 만들기 ","date":"2022-07-26T15:22:52+08:00","permalink":"https://JaeKimdev.github.io/p/hugo%EB%A1%9C-github.io-%EA%B8%B0%EC%88%A0-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%A7%8C%EB%93%A4%EA%B8%B01/","title":"Hugo로 github.io 기술 블로그 만들기(1)"},{"content":"My First Tech blog post!! 🎉\n☀️\n","date":"2022-07-26T11:06:26+08:00","permalink":"https://JaeKimdev.github.io/p/hugo-blog-%ED%85%8C%EC%8A%A4%ED%8A%B8/","title":"Hugo Blog 테스트"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating. — Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code A B C D E F Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex. Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus Proin sit amet velit nec enim imperdiet vehicula. Ut bibendum vestibulum quam, eu egestas turpis gravida nec Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien Code Blocks Code block with backticks 1 2 3 4 5 6 7 8 9 10 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Diff code block 1 2 3 4 5 [dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; - features = [\u0026#34;dynamic\u0026#34;] + features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;] List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nHyperlinked image The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2019-03-11T00:00:00Z","image":"https://JaeKimdev.github.io/p/markdown-syntax-guide/pawel-czerwinski-8uZPynIu-rQ-unsplash_hud7e36f7e20e71be184458283bdae4646_55974_120x120_fill_q75_box_smart1.jpg","permalink":"https://JaeKimdev.github.io/p/markdown-syntax-guide/","title":"Markdown Syntax Guide"},{"content":"Hugo ships with several Built-in Shortcodes for rich content, along with a Privacy Config and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.\nYouTube Privacy Enhanced Shortcode Twitter Simple Shortcode “In addition to being more logical, asymmetry has the advantage that its complete appearance is far more optically effective than symmetry.”\n— Jan Tschichold pic.twitter.com/gcv7SrhvJb\n\u0026mdash; Graphic Design History (@DesignReviewed) January 17, 2019 Vimeo Simple Shortcode bilibilibi Shortcode Gist Shortcode Gitlab Snippets Shortcode Quote Shortcode Stack adds a quote shortcode. For example:\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― A famous person, The book they wrote Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― Anonymous book Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― Some book Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― Somebody","date":"2019-03-10T00:00:00Z","permalink":"https://JaeKimdev.github.io/p/rich-content/","title":"Rich Content"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\nCreate a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so: 1 2 3 {{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }} To enable KaTex globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTex on a per page basis include the parameter math: true in content files Note: Use the online reference of Supported TeX Functions\nExamples Block math: $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\n","date":"2019-03-08T00:00:00Z","permalink":"https://JaeKimdev.github.io/p/math-typesetting/","title":"Math Typesetting"},{"content":"Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site\u0026rsquo;s configuration and then you can type emoji shorthand codes directly in content files; e.g.\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\nN.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n1 2 3 .emoji { font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols; } ","date":"2019-03-05T00:00:00Z","image":"https://JaeKimdev.github.io/p/emoji-support/the-creative-exchange-d2zvqp3fpro-unsplash_huf941de4769045cdfa8c9ee7036519a2a_35369_120x120_fill_q75_box_smart1.jpg","permalink":"https://JaeKimdev.github.io/p/emoji-support/","title":"Emoji Support"}]